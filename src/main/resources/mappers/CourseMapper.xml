<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.teachercloud.dao.CourseMapper">
    <resultMap id="BaseResultMap" type="com.teachercloud.pojo.Course">
        <constructor>
            <idArg column="course_id" jdbcType="INTEGER" javaType="java.lang.Integer"/>
            <arg column="name" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="course_info" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date"/>
            <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date"/>
            <arg column="status" jdbcType="INTEGER" javaType="java.lang.Integer"/>
        </constructor>
    </resultMap>
    <sql id="Base_Column_List">
    course_id, name, course_info, create_time, update_time, status
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from course
        where course_id = #{courseId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from course
    where course_id = #{courseId,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.teachercloud.pojo.Course">
    insert into course (course_id, name, course_info, 
      create_time, update_time, status
      )
    values (#{courseId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{courseInfo,jdbcType=VARCHAR}, 
      now(), now(), 0
      )
  </insert>
    <insert id="insertSelective" parameterType="com.teachercloud.pojo.Course">
        insert into course
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="courseId != null">
                course_id,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="courseInfo != null">
                course_info,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="status != null">
                status,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="courseId != null">
                #{courseId,jdbcType=INTEGER},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="courseInfo != null">
                #{courseInfo,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.teachercloud.pojo.Course">
        update course
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="courseInfo != null">
                course_info = #{courseInfo,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            update_time = now(),
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
        </set>
        where course_id = #{courseId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.teachercloud.pojo.Course">
    update course
    set name = #{name,jdbcType=VARCHAR},
      course_info = #{courseInfo,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=INTEGER}
    where course_id = #{courseId,jdbcType=INTEGER}
  </update>
    <select id="selectAll" resultMap="BaseResultMap" parameterType="string">
        select
        <include refid="Base_Column_List"/>
        from course
        where name
        like #{keyword}
    </select>
    <select id="selectCourseByCourseId" resultMap="BaseResultMap" parameterType="map">
        SELECT
        <include refid="Base_Column_List"/>
        FROM course
        WHERE name LIKE #{keyword}
        AND course_id in
        <foreach item="courseId" collection="courseId" open="(" separator="," close=")">
            #{courseId}
        </foreach>
    </select>
    <select id="checkCourseId" resultType="int" parameterType="int">
        select count(1)
        from course
        where course_id=#{courseId}
    </select>
    <update id="updateCourseStatusBybatch" parameterType="map">
        update course
        set status = #{status},
        update_time = now()
        where course_id in
        <foreach item="courseId" collection="courseId" open="(" separator="," close=")">
            #{courseId}
        </foreach>
    </update>
    <delete id="deleteCourseBybatch" parameterType="map">
        delete from course
        where course_id in
        <foreach item="courseId" collection="courseId" open="(" separator="," close=")">
            #{courseId}
        </foreach>
    </delete>
</mapper>